plugins {
    id 'io.jmix' version '2.4.3'
    id 'java'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.9'
    id 'com.github.fhermansson.assertj-generator' version '1.1.5'
}

apply plugin: 'org.springframework.boot'
apply plugin: 'com.vaadin'

jmix {
    bomVersion = '2.4.3'
    projectId = 'bookstore'
}

group = 'io.jmix'
version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        url 'https://global.repo.jmix.io/repository/public'
    }
    maven {
        url = 'https://global.repo.jmix.io/repository/premium'
        credentials {
            username(rootProject.hasProperty('premiumRepoUser') ?
                    rootProject['premiumRepoUser'] : System.getenv('PREMIUM_REPO_USER'))
            password(rootProject.hasProperty('premiumRepoPass') ?
                    rootProject['premiumRepoPass'] : System.getenv('PREMIUM_REPO_PASS'))
        }
    }
}

vaadin {
    optimizeBundle = false
}

dependencies {
    implementation 'io.jmix.core:jmix-core-starter'
    implementation 'io.jmix.pessimisticlock:jmix-pessimisticlock-starter'
    implementation 'io.jmix.pessimisticlock:jmix-pessimisticlock-flowui-starter'
    implementation 'io.jmix.data:jmix-eclipselink-starter'
    implementation 'io.jmix.security:jmix-security-starter'
    implementation 'io.jmix.security:jmix-security-flowui-starter'
    implementation 'io.jmix.security:jmix-security-data-starter'
    implementation 'io.jmix.localfs:jmix-localfs-starter'
    implementation 'io.jmix.flowui:jmix-flowui-starter'
    implementation 'io.jmix.flowui:jmix-flowui-data-starter'
    implementation 'io.jmix.flowui:jmix-flowui-themes'
    implementation 'io.jmix.datatools:jmix-datatools-starter'
    implementation 'io.jmix.datatools:jmix-datatools-flowui-starter'

    implementation 'io.jmix.bpm:jmix-bpm-flowui-starter'
    implementation 'io.jmix.bpm:jmix-bpm-starter'
    implementation 'io.jmix.gridexport:jmix-gridexport-flowui-starter'
    implementation 'io.jmix.maps:jmix-maps-starter'
    implementation 'io.jmix.maps:jmix-maps-flowui-starter'
    implementation 'io.jmix.multitenancy:jmix-multitenancy-flowui-starter'
    implementation 'io.jmix.multitenancy:jmix-multitenancy-starter'
    implementation 'io.jmix.notifications:jmix-notifications-starter'
    implementation 'io.jmix.notifications:jmix-notifications-flowui-starter'
    implementation 'io.jmix.quartz:jmix-quartz-flowui-starter'
    implementation 'io.jmix.quartz:jmix-quartz-starter'
    implementation 'io.jmix.reports:jmix-reports-starter'
    implementation 'io.jmix.reports:jmix-reports-flowui-starter'
    implementation 'io.jmix.reports:jmix-reports-rest-starter'
    implementation 'io.jmix.email:jmix-email-starter'
    implementation 'io.jmix.email:jmix-email-flowui-starter'
    implementation 'io.jmix.translations:jmix-translations-de'

    implementation 'io.jmix.flowui:jmix-flowui-kit'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    
    implementation 'org.hsqldb:hsqldb'

    // used for GeoJsonReader to parse geojson format from the LocationIQ API
    implementation 'org.locationtech.jts.io:jts-io-common:1.17.1'

    // Test Data generation
    implementation 'net.datafaker:datafaker:1.6.0'

    // Monitoring
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Testing
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation 'org.jetbrains:annotations:24.1.0'

    // used for tests that check @Async annotated methods
    testImplementation 'org.awaitility:awaitility:4.2.0'

    testCompileOnly 'org.projectlombok:lombok:1.18.32'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'

    testCompileOnly 'org.mapstruct:mapstruct:1.5.3.Final'
    testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

    testImplementation 'io.jmix.flowui:jmix-flowui-test-assist'

    testImplementation 'org.hsqldb:hsqldb'

}

configurations.implementation {
    exclude group: 'com.vaadin', module: 'hilla'
    exclude group: 'com.vaadin', module: 'hilla-dev'
}

test {
    useJUnitPlatform()
}

assertjGenerator {
    classOrPackageNames = [
            'io.jmix.bookstore.order.entity.Order',
            'io.jmix.bookstore.order.entity.OrderLine',
            'io.jmix.bookstore.product.Product',
            'io.jmix.bookstore.product.supplier.Supplier',
            'io.jmix.bookstore.product.supplier.SupplierOrder',
            'io.jmix.bookstore.product.supplier.SupplierOrderLine',
            'io.jmix.bookstore.product.supplier.SupplierOrderRequest',
            'io.jmix.bookstore.product.ProductCategory',
            'io.jmix.bookstore.product.ProductPrice',
            'io.jmix.bookstore.customer.Customer',
            'io.jmix.bookstore.fulfillment.FulfillmentCenter',
            'io.jmix.bookstore.entity.Address',
            'io.jmix.bookstore.entity.Money',
    ]
    useJakartaAnnotations = true
}

idea {
    module {
        excludeDirs.addAll(files '.jmix', 'node_modules', 'src/main/frontend/generated/', 'src/main/bundles')
    }
}
